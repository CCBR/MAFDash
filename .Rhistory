rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
?knit_expand
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
filters_df$sd_colname[i]
crosstalk_filters <- c("Sample ID"="Sample.ID",
"Gene mutated in cohort (frequency)"="Gene.Altered.in.Cohort.frac",
"Gene Symbol"="Hugo.Symbol",
"Protein change"="Protein.Change",
"Variant found in cohort (frequency)"="Variant.in.Cohort.frac"
)
filters_df <- data.frame(sd_colname=crosstalk_filters,
filter_label=names(crosstalk_filters),
html_id=paste0("filter_id",1:length(crosstalk_filters)))
filters_df <- filters_df[filters_df$sd_colname %in% colnames(mydf),]
filters_df$sd_colname[i]
filters_df$sd_colname[1]
filters_df$sd_colname[2]
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
filters_df
mydf[,filters_df$sd_colname[i]]
mydf[,filters_df$sd_colname[1]]
print(mydf[,filters_df$sd_colname[1]])
filters_df
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
?filter_slider
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/4_filters")
library(TCGAbiolinks)
library(maftools)
library(ComplexHeatmap)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
tcga_code = "LAML" ## Large-ish dataset
title_label = paste0("TCGA-",tcga_code)
maf_file <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
## Rmd file that drives everything
rmd_filename="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd"
html_filename=file.path("output/laml.html")
myplotlist <- list("burden"=T)
## Render dashboard
source("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R/getMAFDashboard.R")
getMAFDashboard(MAFfilePath = maf_file,
plotList = myplotlist,
outputFileName = html_filename,
outputFileTitle = "Customized Dashboard",
masterRmdFile = rmd_filename)
tcga_clinical <- TCGAbiolinks::GDCquery_clinic(project = paste0("TCGA-",tcga_code), type = "clinical")
tcga_clinical$Tumor_Sample_Barcode <- tcga_clinical$submitter_id
tcga_clinical <- tcga_clinical[,unlist(lapply(tcga_clinical,function(x){!all(is.na(x))}))]
tcga_clinical$age_at_diagnosis <- tcga_clinical$age_at_diagnosis/365
filtered_mafdata <- filterMAF(maf_file)
library(maftools)
filtered_maf <- read.maf(filtered_mafdata, clinicalData = tcga_clinical)
# filtered_maf <- read.maf(filtered_maf)
#
#
# html_filename=file.path("output/TCGA-UVM.default.html")
#
# ## Render dashboard
# getMAFDashboard(MAFfilePath = filtered_maf,
#                 # plotList = list("burden"= T,
#                 #                 "oncoplot" = T,
#                 #                 "heatmap" = T),
#                 masterRmdFile = "~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/inst/extdata/MAFDash.Rmd",
#                 outputFileName = html_filename,
#                 outputFileTitle = "Default Dashboard")
#
rsource_files <- list.files(path="R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
annotation_colors <- getTCGAClinicalColors(ageRange = range(tcga_clinical$age_at_diagnosis, na.rm=T))
# annotation_colors <- annotation_colors[!names(annotation_colors) %in% "age_at_diagnosis"]
custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = T)
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = "ajcc_pathologic_stage")
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors)[1:3], clin_data_colors = annotation_colors)
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors))
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors), clin_data_colors = annotation_colors)
custom_onco_1
filtered_mafdata
tcga_clinical <- TCGAbiolinks::GDCquery_clinic(project = paste0("TCGA-",tcga_code), type = "clinical")
tcga_clinical$Tumor_Sample_Barcode <- tcga_clinical$submitter_id
tcga_clinical <- tcga_clinical[,unlist(lapply(tcga_clinical,function(x){!all(is.na(x))}))]
tcga_clinical$age_at_diagnosis <- tcga_clinical$age_at_diagnosis/365
filtered_mafdata <- filterMAF(maf_file)
library(maftools)
filtered_maf <- read.maf(filtered_mafdata, clinicalData = tcga_clinical)
# tcga_code = "UVM"    ## Small-ish dataset
# tcga_code = "GBM"    ## Small-ish dataset
# tcga_code = "ACC"    ## Small-ish dataset
tcga_code = "BRCA" ## Large-ish dataset
caller = "mutect2"
title_label = paste0("TCGA-",tcga_code)
maf_file <- file.path("data",paste0("TCGA_",tcga_code),caller,paste0("TCGA_",tcga_code,".",caller,".maf"))
if (!file.exists(maf_file)) {
getMAFdataTCGA(tcga_code,variant_caller = caller)
}
tcga_clinical <- TCGAbiolinks::GDCquery_clinic(project = paste0("TCGA-",tcga_code), type = "clinical")
tcga_clinical$Tumor_Sample_Barcode <- tcga_clinical$submitter_id
tcga_clinical <- tcga_clinical[,unlist(lapply(tcga_clinical,function(x){!all(is.na(x))}))]
tcga_clinical$age_at_diagnosis <- tcga_clinical$age_at_diagnosis/365
filtered_mafdata <- filterMAF(maf_file)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
annotation_colors <- getTCGAClinicalColors(ageRange = range(tcga_clinical$age_at_diagnosis, na.rm=T))
# annotation_colors <- annotation_colors[!names(annotation_colors) %in% "age_at_diagnosis"]
custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = T)
filtered_maf <- read.maf(filtered_mafdata, clinicalData = tcga_clinical)
rsource_files <- list.files(path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage/R",
pattern="*.R", full.names = T)
for (funcfile in rsource_files) {
source(funcfile)
}
annotation_colors <- getTCGAClinicalColors(ageRange = range(tcga_clinical$age_at_diagnosis, na.rm=T))
# annotation_colors <- annotation_colors[!names(annotation_colors) %in% "age_at_diagnosis"]
custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = T)
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = "ajcc_pathologic_stage")
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors)[1:3], clin_data_colors = annotation_colors)
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors))
# custom_onco_1 <- generateOncoPlot(filtered_maf, add_clinical_annotations = names(annotation_colors), clin_data_colors = annotation_colors)
custom_onco_1
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#
#   package.list <- setdiff(package.list,basic.packages)
#
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
#
# }
# detachAllPackages()
pkgdown::build_site()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#
#   package.list <- setdiff(package.list,basic.packages)
#
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
#
# }
# detachAllPackages()
pkgdown::build_site()
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#
#   package.list <- setdiff(package.list,basic.packages)
#
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
#
# }
# detachAllPackages()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
pkgdown::build_site()
?knitr::include_graphics
?getMAFDashboard
?getGDCprojecs
?getGDCprojects
getGDCprojects()
getMAFdataTCGA()
?getMAFdataTCGA()
getMAFdataTCGA(tcga_code,variant_caller = caller)
tcga_code = "UVM"
caller = "mutect2"
getMAFdataTCGA(tcga_code,variant_caller = caller)
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#   package.list <- setdiff(package.list,basic.packages)
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE, unload=TRUE)
#
#   # namespaces.list <- paste0("package:",loadedNamespaces())
#   # namespaces.list <- loadedNamespaces()
#   # if (length(namespaces.list)>0)  for (ns in namespaces.list) unloadNamespace(ns)
#
#
#
# }
# detachAllPackages()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/testing/build_test")
recompile=T
# recompile=F
source_lib_path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage"
dest_lib_path="lib_build"
if (!dir.exists(dest_lib_path)){dir.create(dest_lib_path)}
if (recompile) {
install.packages(source_lib_path, repos=NULL, type="source", lib=dest_lib_path)
}
library(MAFDashRPackage,lib.loc = dest_lib_path)
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
generateSingleRibbonPlot(laml.maf)
laml.maf
generateSingleRibbonPlot(read.maf(laml.maf))
this <- generateSingleRibbonPlot(read.maf(laml.maf))
draw(this)
this
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
laml.maf <- read.maf(laml.maf)
generateSingleRibbonPlot(laml.maf)
dev.off()
generateSingleRibbonPlot(laml.maf)
tcga_code = "UVM"    ## Small-ish dataset
# tcga_code = "BRCA" ## Large-ish dataset
# tcga_code = "LAML" ## Large-ish dataset
# tcga_code = "GBM" ## Large-ish dataset
caller = "mutect2"
title_label = paste0("TCGA-",tcga_code)
# out_dir = file.path("output")
# if(!dir.exists(out_dir)){dir.create(out_dir, recursive = T)}
maf_file <- file.path("data",paste0("TCGA_",tcga_code),caller,paste0("TCGA_",tcga_code,".",caller,".maf"))
if (!file.exists(maf_file)) {
getMAFdataTCGA(tcga_code,variant_caller = caller)
}
tcga_clinical <- TCGAbiolinks::GDCquery_clinic(project = paste0("TCGA-",tcga_code), type = "clinical")
tcga_clinical$Tumor_Sample_Barcode <- tcga_clinical$submitter_id
filtered_mafdata <- filterMAF(maf_file)
filtered_maf <- read.maf(filtered_mafdata, clinicalData = tcga_clinical)
generateSingleRibbonPlot(filtered_maf)
generateSingleRibbonPlot(filtered_maf, pval_high = 0.05, pval_low=0.01)
generateSingleRibbonPlot(filtered_maf, pval_high = 0.01, pval_low=0.001)
generateSingleRibbonPlot(filtered_maf, pval_high = 0.001, pval_low=0.0001)
generateSingleRibbonPlot(filtered_maf, pval_high = 0.001, pval_low=0.0001)
generateSingleRibbonPlot(filtered_maf, pval_high = 1e-12, pval_low=1e-16)
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#
#   package.list <- setdiff(package.list,basic.packages)
#
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
#
# }
# detachAllPackages()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
pkgdown::build_site()
# detachAllPackages <- function() {
#
#   basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
#
#   package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
#
#   package.list <- setdiff(package.list,basic.packages)
#
#   if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
#
# }
# detachAllPackages()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/build")
recompile=T
# recompile=F
source_lib_path="~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage"
dest_lib_path="lib_build"
if (!dir.exists(dest_lib_path)){dir.create(dest_lib_path)}
if (recompile) {
install.packages(source_lib_path, repos=NULL, type="source", lib=dest_lib_path)
}
library(MAFDashRPackage,lib.loc = dest_lib_path)
rm(list=ls())
setwd("~/Documents/my_tools/MAFdash/Rpackage/mtandon09_fork/MAFDashRPackage")
# usethis::use_pkgdown()
devtools::document()
roxygen2::roxygenise()
?roxygenise
roxygen2::roxygenise(clean=T)
